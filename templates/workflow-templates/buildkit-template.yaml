# SUMMARY:
#
# Build and push an image using Docker Buildkit.
#
# DESCRIPTION:
#
# This does not need privileged access, unlike Docker in Docker (DIND). It has three stages:
#
# * clone the Git repository
# * build the binary
# * build and push the image containing the binary
#
# USAGE:
#
# Publishing images requires an access token. For hub.docker.com you can create one at https://hub.docker.com/settings/security
# This needs to be mounted as `$DOCKER_CONFIG/config.json`. To do this, you'll need to create a secret as follows:
#
#    export DOCKER_USERNAME=******
#    export DOCKER_TOKEN=******
#    kubectl create secret generic docker-config --from-literal="config.json={\"auths\": {\"https://index.docker.io/v1/\": {\"auth\": \"$(echo -n $DOCKER_USERNAME:$DOCKER_TOKEN|base64)\"}}`}}}"
#
# REFERENCES:
#
# * https://github.com/moby/buildkit#expose-buildkit-as-a-tcp-service
# * https://blog.alexellis.io/building-containers-without-docker/
# * https://hub.docker.com/r/moby/buildkit
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: buildkit
  namespace: {{ .Release.Namespace }}
spec:
  serviceAccountName: {{ .Values.serviceAccount.name }}
  arguments:
    parameters:
      - name: repo
        value: https://github.com/frenoid/trino-load-tester.git
        description: Git repo where Dockerfile is found
      - name: branch
        value: master
        description: Choose branch of Git repo to use
      - name: dockerfilePath
        value: "."
        description: Relative path in repo where Dockerfile is located
      - name: dockerfileName
        value: "Dockerfile"
        description: Filename of dockerfile in dockerfilePath
      - name: imageName
        value: "test/test"
        description: "Image reference on docker.io e.g docker.io/<imageName>"
      - name: imageTag
        value: "latest"
        description: "Image reference on docker.io e.g docker.io/<imageName>/<imageTag>"
      - name: push
        value: false
        enum:
        - true
        - false
  entrypoint: main
  # We use a volume claim template so that we can have a shared workspace.
  volumeClaimTemplates:
    - metadata:
        name: work
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
  templates:
  - name: main
    dag:
      tasks:
        - name: clone-repo
          template: clone-repo
          arguments:
            parameters:
              - name: repo
                value: "{{`{{workflow.parameters.repo}}`}}"
              - name: branch
                value: "{{`{{workflow.parameters.branch}}`}}"
        - name: build-push-image
          template: build-push-image
          arguments:
            parameters:
              - name: dockerfilePath
                value: "{{`{{workflow.parameters.dockerfilePath}}`}}"
              - name: dockerfileName
                value: "{{`{{workflow.parameters.dockerfileName}}`}}"
              - name: imageName
                value: "{{`{{workflow.parameters.imageName}}`}}"
              - name: push
                value: "{{`{{workflow.parameters.push}}`}}"
          depends: "clone-repo"
  - name: clone-repo
    inputs:
      parameters:
        - name: repo
        - name: branch
    container:
      volumeMounts:
        - mountPath: /work
          name: work
      image: alpine/git:v2.26.2
      workingDir: /work
      # Do a shallow clone, which is the fastest way to clone, by using the
      # --depth, --branch, and --single-branch options
      args:
        - clone
        - --depth
        - "1"
        - --branch
        - "{{`{{inputs.parameters.branch}}`}}"
        - --single-branch
        - "{{`{{inputs.parameters.repo}}`}}"
        - .
  - name: build-push-image
    inputs:
      parameters:
      - name: imageName
      - name: dockerfilePath
      - name: dockerfileName
      - name: push
    # Mount the configuration so we can push the image.
    # This should create the /.docker/config.json file.
    volumes:
      - name: docker-config
        secret:
          secretName: docker-config
    container:
      readinessProbe:
        exec:
          command: [ sh, -c, "buildctl debug workers" ]
      image: moby/buildkit:v0.9.3-rootless
      volumeMounts:
        - name: work
          mountPath: /work
        - name: docker-config
          mountPath: /.docker
      workingDir: /work/{{`{{inputs.parameters.dockerfilePath}}`}}
      env:
        - name: BUILDKITD_FLAGS
          value: --oci-worker-no-process-sandbox
        - name: DOCKER_CONFIG
          value: /.docker
      command:
        - buildctl-daemonless.sh
      args:
        - build
        - --frontend
        - dockerfile.v0
        - --local
        - context=.
        - --local
        - dockerfile=.
        - --output
        - type=image,name=docker.io/{{`{{inputs.parameters.imageName}}`}},push={{`{{inputs.parameters.push}}`}}
        - --opt
        - filename=./{{`{{inputs.parameters.dockerfileName}}`}}